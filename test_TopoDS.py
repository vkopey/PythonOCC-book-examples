# encoding: utf-8
# Топологічні об'єкти
from myBaseGeom import *

# OCCT-топологія дозволяє доступ і маніпуляцію об'єктами без їх 2D чи 3D представлення.
# В той час як OCCT-геометрія забезпечує описи обєктів в термінах координат чи параметричних значень,
# OCCT-топологія описує структури даних об'єктів в параметричному просторі.
# Ці описи використовують розташування і обмеження частин цього простору.
# Для забезпечення цих описів абстрактна топологія OCCT дає наступні сервіси:
# - відслідковування розташування форм
# - іменування форм, субформ, їх орієнтацій і станів
# - маніпуляція формами і субформами
# - дослідження топологічних структур даних
# - використання списків і словників форм

# Ресурси для топологічно орієнтованих застосувань,
# наприклад, перерехування форм, орієнтації форм та позиції точки відносно форми
from OCC.TopAbs import *

# Ідентифікація різних топологічних форм (від складного до простого):
ShapeEnum = {
    0: 'COMPOUND', # група будь-яких форм
    1: 'COMPSOLID', # група тіл з'єднаних гранями
    2: 'SOLID', # тіло обмежене оболонкою
    3: 'SHELL', # оболонка - група граней з'єднаних ребрами
    4: 'FACE', # грань - частина площини або поверхня, обмежена контуром
    5: 'WIRE', # контур - послідовність ребер, з'єднаних вершинами
    6: 'EDGE', # ребро - одновимірна форма, яка відповідає кривій і обмежена вершинами
    7: 'VERTEX', # вершина - нуль-вимірна форма, яка відповідає точці
    8: 'SHAPE' # форма взагалі
} # Будь-яка форма може містити простіші форми.

# Орієнтація топологічної форми - це загальне поняття у змісті напрямку.
# Орієнтація може відображати відношення між двома об'єктами. Використовується коли форма є границею області і тому близьке до поняття границі.
# Наприклад, для кривої обмеженою вершиною, регіоном за замовчуванням є множина точок з параметрами більшими за вершину.
# Тоді частина кривої після вершини слідує природньому напрямку вздовж кривої (FORWARD).
# Для грані обмеженою ребром регіон за змовчуванням є зліва від ребра, яке слідує природньому напрямку (FORWARD).
Orientation = {
    0: 'FORWARD', # матеріал є регіоном за замовчуванням (наприклад, ребро грані має орієнтацію FORWARD)
    1: 'REVERSED', # матеріал є регіоном додатковим регіону за замовчуванням (наприклад, ребро грані має орієнтацію REVERSED)
    2: 'INTERNAL', # границя лежить в матеріалі (наприклад, ребро всередині грані)
    3: 'EXTERNAL' # границя лежить поза матеріалом (наприклад, ребро поза гранею)
}

# Стан - ідентифікує позицію вершини або вершин відносно регіону форми
State = {
    0: 'IN', # точка в матеріалі
    1: 'OUT', # точка поза матеріалом
    2: 'ON', # точка на границі
    3: 'UNKNOWN' # стан точки не визначений
}

# Класи для моделювання і побудови чисто типологічних структур даних:
# TopoDS_Shape, TopoDS_Vertex, TopoDS_Edge, TopoDS_Wire, TopoDS_Face,
# TopoDS_Shell, TopoDS_Solid, TopoDS_CompSolid, TopoDS_Compound
# Забезпечує методи для перетворення обєктів класу TopoDS_Shape в обєкти більш спеціалізованих підкласів
from OCC.TopoDS import *

# Інструменти для топологічних структур даних, наприклад, колекції форм
from OCC.TopTools import *

from OCC.BRepBuilderAPI import *

p1=gp_Pnt(0, 0, 0) # точка
p2=gp_Pnt(0, 2, 0) # точка
medge1=BRepBuilderAPI_MakeEdge(p1,p2) # створити ребро
edge1=medge1.Shape() # ребро 
vert1=medge1.Vertex1() # перша вершина
vert2=medge1.Vertex2() # друга вершина
print ShapeEnum[edge1.ShapeType()] # тип форми (TopAbs_ShapeEnum)
print Orientation[edge1.Orientation()] # орієнтація (TopAbs_Orientation)
print Orientation[vert1.Orientation()]
print Orientation[vert2.Orientation()]
print edge1.Location() # локальна система координат форми (TopLoc_Location)
print vert1.Location()
print vert2.Location()
print vert1.IsEqual(vert2) # чи ідентичні ShapeType, Orientation і Location ?

# ресурси для обробки 3D локальних систем координат
# Datum3D описує елементарну систему координат
# Location описує серію елементарних координат
from OCC.TopLoc import *
trsf=gp_Trsf() # трансформація
trsf.SetTranslation(gp_Vec(gp_Pnt(),gp_Pnt(1,0,0))) # зміщення
loc=TopLoc_Location(trsf) # створити локальну систему координат
edge1.Location(loc) # установити нову локальну систему координат форми
# або можна застосувати BRepBuilderAPI_Transform

display.DisplayShape(edge1)
display.DisplayShape(vert1)
display.DisplayShape(vert2)

display.FitAll()                            
start_display()