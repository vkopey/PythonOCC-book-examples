# encoding: utf-8
"""Геометричний процессор gp - незбережувані базові геометричні об'єкти
З цими об'єктами працюють за значенням"""
from myBaseGeom import *

p1=gp_Pnt(0,0,0) # 3D точка в декартовій системі координат
print p1.X() # координата X
print p1.Distance(gp_Pnt(1,1,1)) # відстань між точками
p2=p1.Translated(gp_Pnt(0,0,0),gp_Pnt(1,0,0)) # нова точка шляхом переміщення

vec1=gp_Vec(gp_Pnt(0,0,0), gp_Pnt(1, 1, 1)) # 3D вектор
print vec1.Magnitude() # довжина вектора
vec2=gp_Vec(gp_Pnt(0,0,0), gp_Pnt(1, 0, 0)) # 3D вектор
print vec1.Angle(vec2) # кут між векторами

dir1=gp_Dir(vec1) # одиничний вектор в 3D просторі (напрямок)
dir2=gp_Dir() # напрямок, який відповідає осі X
dir2=gp_Dir(1,0,0) # або так
dir2=gp_DX() # або так

ax1=gp_Ax1(p1, dir1) # вісь в 3D просторі
ax2=gp_Ax1() # вісь Z системи координат

ax3=gp_Ax2(p1,dir2) # правостороння система координат в 3D просторі (dir2 задає головний напрямок)
ax4=gp_Ax2() # вихідна система координат (OXYZ)
ax5=gp_Ax3(ax3) # система координат в 3D просторі, яка може бути правосторонною або лівосторонною

mat1=gp_Mat() # нульова матриця для векторних і матричних обчислень

ln1=gp_Lin(p1, dir1) # лінія в 3D просторі
print ln1.Location().X() # X координата вихідної точки лінії
print ln1.Distance(p2) # відстань до точки
ln2=ln1.Normal(p2) # лінія, нормальна до заданої

cir1=gp_Circ(ax4,5) # коло в 3D просторі радіусом 5

pln1=gp_Pln(p1, dir1) # площина (dir1 нормальний до площини)
pln2=gp_Pln() # площина OXY
print pln2.XAxis() # вісь X площини

sph1=gp_Sphere(ax5,5) # сфера з локальною системою координат ax5 і радіусом 5

cyl1=gp_Cylinder(ax5,5) # циліндр з локальною системою координат ax5 і радіусом 5

trsf1=gp_Trsf() # визначає незбережувану трансформацію в 3D просторі
trsf1.SetTranslation(vec1) # змінює трансформацію на переміщення
# див. також BRepBuilderAPI_Transform

#######################################################################
# Для 2D існують аналогічні класи, але містять вкінці "2d", наприклад:
# gp_Pnt2d, gp_Vec2d, gp_Dir2d ,gp_Ax22d

#######################################################################
# Алгоритми для побудови елементарних геометричних об'єктів OCC.gp
from OCC.gce import *
ln3=gce_MakeLin(p1,p2) # алгоритм побудови лінії
if ln3.IsDone(): # якщо побудова успішна
    ln3=ln3.Value() # лінія класу OCC.gp.gp_Lin
else:
    ln3.Status() # статус помилки
    
trsf2=gce_MakeTranslation(vec1) # алгоритм трансформації-переміщення
trsf2=trsf2.Value() # трансформація-переміщення класу gp_Trsf

display.DisplayShape(p1)
start_display()